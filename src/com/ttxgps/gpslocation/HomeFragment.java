package com.ttxgps.gpslocation;import java.io.ByteArrayInputStream;import java.io.InputStream;import java.io.UnsupportedEncodingException;import java.util.ArrayList;import java.util.LinkedList;import java.util.List;import org.apache.http.HttpResponse;import org.apache.http.client.methods.HttpGet;import org.apache.http.impl.client.DefaultHttpClient;import org.apache.http.params.CoreConnectionPNames;import org.apache.http.util.EntityUtils;import org.json.JSONArray;import org.json.JSONException;import org.json.JSONObject;import android.content.Context;import android.content.Intent;import android.content.SharedPreferences;import android.graphics.BitmapFactory;import android.graphics.Color;import android.graphics.drawable.ColorDrawable;import android.graphics.drawable.Drawable;import android.os.Bundle;import android.os.Handler;import android.os.Message;import android.support.v4.app.Fragment;import android.text.TextUtils;import android.util.Log;import android.view.LayoutInflater;import android.view.View;import android.view.View.OnClickListener;import android.view.ViewGroup;import android.webkit.WebView.FindListener;import android.widget.AdapterView;import android.widget.AdapterView.OnItemClickListener;import android.widget.Button;import android.widget.EditText;import android.widget.GridView;import android.widget.ImageView;import android.widget.RelativeLayout;import android.widget.TextView;import android.widget.Toast;import com.palmtrends.loadimage.Utils;import com.ttxgps.adapter.HomeAdapter;import com.ttxgps.bean.BabyInfoBean;import com.ttxgps.bean.HomeGridviewBean;import com.ttxgps.bean.StealthTimeBean;import com.ttxgps.entity.Trace;import com.ttxgps.entity.User;import com.ttxgps.msg.MsgActivity;import com.ttxgps.utils.AsyncHttpUtil;import com.ttxgps.utils.AsyncHttpUtil.JsonHttpHandler;import com.ttxgps.utils.AsyncImageLoader;import com.ttxgps.utils.AsyncImageLoader.ImageCallback;import com.ttxgps.utils.CommonUtils;import com.ttxgps.utils.Constants;import com.ttxgps.utils.DevicesUtils;import com.ttxgps.utils.WebService;import com.ttxgps.utils.WebServiceProperty;import com.ttxgps.utils.WebServiceTask;import com.ttxgps.utils.WebServiceTask.WebServiceResult;import com.ttxgps.weather.Configration;import com.ttxgps.weather.Weather;import com.xtst.gps.R;public class HomeFragment extends Fragment implements OnClickListener {	private final String mStrKey = "F2dc0e136b1bb30f9eb2626c0ee531ad";	View view;	private GridView gridview;	private ImageView imgHeadIcon;	private TextView Nicktv, Runtv;	private String PhotoPath; // 头像路径	private View popup_monitor_record;	private EditText monitor_phone_edt;	private Button affirm_btn, cancel_btn;	private TextView Electricity;// 电量	private TextView DeviceState;// 设备状态	private ImageView Weather_img;	private TextView Address_tv, Celsius_tv;	private TextView tvExpireTime;	private String weather_tx, address_tx, celsius_tx;	private List<HomeGridviewBean> homeGridviewBeans = new ArrayList<HomeGridviewBean>();	private HomeGridviewBean homeGridviewBean;	private HomeAdapter homeAdapter;	private Context context;	private final AsyncImageLoader imageLoader = new AsyncImageLoader();	private BabyInfoBean babyInfoBean;	private final int curMapType = 0;	//private String arguments;	@Override	public void onCreate(Bundle savedInstanceState) {		// TODO Auto-generated method stub		super.onCreate(savedInstanceState);	}	@Override	public View onCreateView(LayoutInflater inflater, ViewGroup container,			Bundle savedInstanceState) {		// TODO Auto-generated method stub		view = inflater.inflate(R.layout.fragment_home, null);		context = getActivity();		// if(User.babyslist==null||User.babyslist.size()==0){		// User.getDevicesList(context);		// // User.curBabys = User.babyslist.get(0);		// }		babyInfoBean = User.curBabys;		//initTitle();		initView();		// getRunInfo();		// getLocationWeather(0, 0);		// initIcon();		return view;	}	private void initViewData() {		homeGridviewBeans = new ArrayList<HomeGridviewBean>();		String imeiTypeValue = babyInfoBean.getPhoneNum();		if (imeiTypeValue.equals("书包")) {			// 定位			homeGridviewBean = new HomeGridviewBean();			homeGridviewBean.setNormaldrawableId(R.drawable.home_location_img);			homeGridviewBean.setDrawableName(HomeGridviewBean.NAME_LOCATION);			homeGridviewBean.setBackground(R.drawable.btn_home_location);			homeGridviewBeans.add(homeGridviewBean);			// 监听			homeGridviewBean = new HomeGridviewBean();			homeGridviewBean.setNormaldrawableId(R.drawable.home_monitor_img);			homeGridviewBean.setDrawableName(HomeGridviewBean.NAME_MONITOR);			homeGridviewBean.setBackground(R.drawable.btn_home_monitor);			homeGridviewBeans.add(homeGridviewBean);			// 健康			homeGridviewBean = new HomeGridviewBean();			homeGridviewBean			.setNormaldrawableId(R.drawable.home_health_img);			homeGridviewBean.setDrawableName(HomeGridviewBean.NAME_HEALTH);			homeGridviewBean.setBackground(R.drawable.btn_home_health);			homeGridviewBeans.add(homeGridviewBean);			// 监护人管理			homeGridviewBean = new HomeGridviewBean();			homeGridviewBean			.setNormaldrawableId(R.drawable.home_guarder_img);			homeGridviewBean.setDrawableName(HomeGridviewBean.NAME_GUARDER);			homeGridviewBean.setBackground(R.drawable.btn_home_guarder);			homeGridviewBeans.add(homeGridviewBean);			// 设置			homeGridviewBean = new HomeGridviewBean();			homeGridviewBean			.setNormaldrawableId(R.drawable.home_setting_img);			homeGridviewBean.setDrawableName(HomeGridviewBean.NAME_SETTING);			homeGridviewBean.setBackground(R.drawable.btn_home_setting);			homeGridviewBeans.add(homeGridviewBean);		} else if (imeiTypeValue.equals("鞋")) {			// 定位			homeGridviewBean = new HomeGridviewBean();			homeGridviewBean			.setNormaldrawableId(R.drawable.home_location_img);			homeGridviewBean			.setDrawableName(HomeGridviewBean.NAME_LOCATION);			homeGridviewBean.setBackground(R.drawable.btn_home_location);			homeGridviewBeans.add(homeGridviewBean);			// 监听			homeGridviewBean = new HomeGridviewBean();			homeGridviewBean			.setNormaldrawableId(R.drawable.home_monitor_img);			homeGridviewBean.setDrawableName(HomeGridviewBean.NAME_MONITOR);			homeGridviewBean.setBackground(R.drawable.btn_home_monitor);			homeGridviewBeans.add(homeGridviewBean);			// 健康			homeGridviewBean = new HomeGridviewBean();			homeGridviewBean			.setNormaldrawableId(R.drawable.home_health_img);			homeGridviewBean.setDrawableName(HomeGridviewBean.NAME_HEALTH);			homeGridviewBean.setBackground(R.drawable.btn_home_health);			homeGridviewBeans.add(homeGridviewBean);			// 监护人管理			homeGridviewBean = new HomeGridviewBean();			homeGridviewBean			.setNormaldrawableId(R.drawable.home_guarder_img);			homeGridviewBean.setDrawableName(HomeGridviewBean.NAME_GUARDER);			homeGridviewBean.setBackground(R.drawable.btn_home_guarder);			homeGridviewBeans.add(homeGridviewBean);			// 设置			homeGridviewBean = new HomeGridviewBean();			homeGridviewBean			.setNormaldrawableId(R.drawable.home_setting_img);			homeGridviewBean.setDrawableName(HomeGridviewBean.NAME_SETTING);			homeGridviewBean.setBackground(R.drawable.btn_home_setting);			homeGridviewBeans.add(homeGridviewBean);		} else if (imeiTypeValue.equals("宠物")) {			// 定位			homeGridviewBean = new HomeGridviewBean();			homeGridviewBean.setNormaldrawableId(R.drawable.home_location_img);			homeGridviewBean.setDrawableName(HomeGridviewBean.NAME_LOCATION);			homeGridviewBean.setBackground(R.drawable.btn_home_location);			homeGridviewBeans.add(homeGridviewBean);			// 监听			homeGridviewBean = new HomeGridviewBean();			homeGridviewBean.setNormaldrawableId(R.drawable.home_monitor_img);			homeGridviewBean.setDrawableName(HomeGridviewBean.NAME_MONITOR);			homeGridviewBean.setBackground(R.drawable.btn_home_monitor);			homeGridviewBeans.add(homeGridviewBean);			// 健康			homeGridviewBean = new HomeGridviewBean();			homeGridviewBean.setNormaldrawableId(R.drawable.home_health_img);			homeGridviewBean.setDrawableName(HomeGridviewBean.NAME_HEALTH);			homeGridviewBean.setBackground(R.drawable.btn_home_health);			homeGridviewBeans.add(homeGridviewBean);			// 计步器			homeGridviewBean = new HomeGridviewBean();			homeGridviewBean.setNormaldrawableId(R.drawable.home_health_img);			homeGridviewBean.setDrawableName(HomeGridviewBean.NAME_INJECT);			homeGridviewBean.setBackground(R.drawable.btn_home_health);			homeGridviewBeans.add(homeGridviewBean);			// 监护人管理			homeGridviewBean = new HomeGridviewBean();			homeGridviewBean			.setNormaldrawableId(R.drawable.home_guarder_img);			homeGridviewBean.setDrawableName(HomeGridviewBean.NAME_GUARDER);			homeGridviewBean.setBackground(R.drawable.btn_home_guarder);			homeGridviewBeans.add(homeGridviewBean);			// 设置			homeGridviewBean = new HomeGridviewBean();			homeGridviewBean			.setNormaldrawableId(R.drawable.home_setting_img);			homeGridviewBean.setDrawableName(HomeGridviewBean.NAME_SETTING);			homeGridviewBean.setBackground(R.drawable.btn_home_setting);			homeGridviewBeans.add(homeGridviewBean);		} else if (imeiTypeValue.equals("机器人")) {			// 人机交互			homeGridviewBean = new HomeGridviewBean();			homeGridviewBean			.setNormaldrawableId(R.drawable.home_location_img);			homeGridviewBean			.setDrawableName(HomeGridviewBean.NAME_MANMACHINE);			homeGridviewBean.setBackground(R.drawable.btn_home_location);			homeGridviewBeans.add(homeGridviewBean);			// 娱乐			homeGridviewBean = new HomeGridviewBean();			homeGridviewBean			.setNormaldrawableId(R.drawable.home_monitor_img);			homeGridviewBean			.setDrawableName(HomeGridviewBean.NAME_AMUSEMENT);			homeGridviewBean.setBackground(R.drawable.btn_home_monitor);			homeGridviewBeans.add(homeGridviewBean);			// 教育			homeGridviewBean = new HomeGridviewBean();			homeGridviewBean			.setNormaldrawableId(R.drawable.home_health_img);			homeGridviewBean.setDrawableName(HomeGridviewBean.NAME_TEACH);			homeGridviewBean.setBackground(R.drawable.btn_home_health);			homeGridviewBeans.add(homeGridviewBean);			// 监护人管理			homeGridviewBean = new HomeGridviewBean();			homeGridviewBean			.setNormaldrawableId(R.drawable.home_guarder_img);			homeGridviewBean.setDrawableName(HomeGridviewBean.NAME_GUARDER);			homeGridviewBean.setBackground(R.drawable.btn_home_guarder);			homeGridviewBeans.add(homeGridviewBean);			// 设置			homeGridviewBean = new HomeGridviewBean();			homeGridviewBean			.setNormaldrawableId(R.drawable.home_setting_img);			homeGridviewBean.setDrawableName(HomeGridviewBean.NAME_SETTING);			homeGridviewBean.setBackground(R.drawable.btn_home_setting);			homeGridviewBeans.add(homeGridviewBean);		} else if (imeiTypeValue.equals("手表")) {			// 定位			homeGridviewBean = new HomeGridviewBean();			homeGridviewBean			.setNormaldrawableId(R.drawable.home_location_img);			homeGridviewBean			.setDrawableName(HomeGridviewBean.NAME_LOCATION);			homeGridviewBean.setBackground(R.drawable.btn_home_location);			homeGridviewBeans.add(homeGridviewBean);			// 监听			homeGridviewBean = new HomeGridviewBean();			homeGridviewBean			.setNormaldrawableId(R.drawable.home_monitor_img);			homeGridviewBean.setDrawableName(HomeGridviewBean.NAME_MONITOR);			homeGridviewBean.setBackground(R.drawable.btn_home_monitor);			homeGridviewBeans.add(homeGridviewBean);			// 对讲			homeGridviewBean = new HomeGridviewBean();			homeGridviewBean.setNormaldrawableId(R.drawable.home_talk_back_img);			homeGridviewBean			.setDrawableName(HomeGridviewBean.NAME_TALK_BACK);			homeGridviewBean.setBackground(R.drawable.btn_home_talk_back);			homeGridviewBeans.add(homeGridviewBean);			// 健康			homeGridviewBean = new HomeGridviewBean();			homeGridviewBean			.setNormaldrawableId(R.drawable.home_health_img);			homeGridviewBean.setDrawableName(HomeGridviewBean.NAME_HEALTH);			homeGridviewBean.setBackground(R.drawable.btn_home_health);			homeGridviewBeans.add(homeGridviewBean);			// 录音			homeGridviewBean = new HomeGridviewBean();			homeGridviewBean.setNormaldrawableId(R.drawable.home_sound_img);			homeGridviewBean.setDrawableName(HomeGridviewBean.NAME_SOUND);			homeGridviewBean.setBackground(R.drawable.btn_home_sound);			homeGridviewBeans.add(homeGridviewBean);			// 信息中心			homeGridviewBean = new HomeGridviewBean();			homeGridviewBean.setNormaldrawableId(R.drawable.home_message_img);			homeGridviewBean.setDrawableName(HomeGridviewBean.NAME_MESSAGE);			homeGridviewBean.setBackground(R.drawable.btn_home_message);			homeGridviewBeans.add(homeGridviewBean);			// 监护人管理			homeGridviewBean = new HomeGridviewBean();			homeGridviewBean			.setNormaldrawableId(R.drawable.home_guarder_img);			homeGridviewBean.setDrawableName(HomeGridviewBean.NAME_GUARDER);			homeGridviewBean.setBackground(R.drawable.btn_home_guarder);			homeGridviewBeans.add(homeGridviewBean);			// 设置			homeGridviewBean = new HomeGridviewBean();			homeGridviewBean.setNormaldrawableId(R.drawable.home_setting_img);			homeGridviewBean.setDrawableName(HomeGridviewBean.NAME_SETTING);			homeGridviewBean.setBackground(R.drawable.btn_home_setting);			homeGridviewBeans.add(homeGridviewBean);		} else if (imeiTypeValue.equals("智能家居")) {			// 开关			homeGridviewBean = new HomeGridviewBean();			homeGridviewBean			.setNormaldrawableId(R.drawable.home_location_img);			homeGridviewBean.setDrawableName(HomeGridviewBean.NAME_SWITCH);			homeGridviewBean.setBackground(R.drawable.btn_home_location);			homeGridviewBeans.add(homeGridviewBean);			// 温度			homeGridviewBean = new HomeGridviewBean();			homeGridviewBean			.setNormaldrawableId(R.drawable.home_monitor_img);			homeGridviewBean			.setDrawableName(HomeGridviewBean.NAME_TEMPERATURE);			homeGridviewBean.setBackground(R.drawable.btn_home_monitor);			homeGridviewBeans.add(homeGridviewBean);			// 时间			homeGridviewBean = new HomeGridviewBean();			homeGridviewBean			.setNormaldrawableId(R.drawable.home_talk_back_img);			homeGridviewBean.setDrawableName(HomeGridviewBean.NAME_TIME);			homeGridviewBean.setBackground(R.drawable.btn_home_talk_back);			homeGridviewBeans.add(homeGridviewBean);			// 监护人管理			homeGridviewBean = new HomeGridviewBean();			homeGridviewBean			.setNormaldrawableId(R.drawable.home_guarder_img);			homeGridviewBean.setDrawableName(HomeGridviewBean.NAME_GUARDER);			homeGridviewBean.setBackground(R.drawable.btn_home_guarder);			homeGridviewBeans.add(homeGridviewBean);			// 设置			homeGridviewBean = new HomeGridviewBean();			homeGridviewBean			.setNormaldrawableId(R.drawable.home_setting_img);			homeGridviewBean.setDrawableName(HomeGridviewBean.NAME_SETTING);			homeGridviewBean.setBackground(R.drawable.btn_home_setting);			homeGridviewBeans.add(homeGridviewBean);		} else if (imeiTypeValue.equals("自行车")) {			// 定位			homeGridviewBean = new HomeGridviewBean();			homeGridviewBean			.setNormaldrawableId(R.drawable.home_location_img);			homeGridviewBean			.setDrawableName(HomeGridviewBean.NAME_LOCATION);			homeGridviewBean.setBackground(R.drawable.btn_home_location);			homeGridviewBeans.add(homeGridviewBean);			// 监听			homeGridviewBean = new HomeGridviewBean();			homeGridviewBean			.setNormaldrawableId(R.drawable.home_monitor_img);			homeGridviewBean.setDrawableName(HomeGridviewBean.NAME_MONITOR);			homeGridviewBean.setBackground(R.drawable.btn_home_monitor);			homeGridviewBeans.add(homeGridviewBean);			// 健康			homeGridviewBean = new HomeGridviewBean();			homeGridviewBean			.setNormaldrawableId(R.drawable.home_health_img);			homeGridviewBean.setDrawableName(HomeGridviewBean.NAME_HEALTH);			homeGridviewBean.setBackground(R.drawable.btn_home_health);			homeGridviewBeans.add(homeGridviewBean);			// 防盗报警			homeGridviewBean = new HomeGridviewBean();			homeGridviewBean			.setNormaldrawableId(R.drawable.home_message_img);			homeGridviewBean			.setDrawableName(HomeGridviewBean.NAME_PREVENTION);			homeGridviewBean.setBackground(R.drawable.btn_home_message);			homeGridviewBeans.add(homeGridviewBean);			// 监护人管理			homeGridviewBean = new HomeGridviewBean();			homeGridviewBean			.setNormaldrawableId(R.drawable.home_guarder_img);			homeGridviewBean.setDrawableName(HomeGridviewBean.NAME_GUARDER);			homeGridviewBean.setBackground(R.drawable.btn_home_guarder);			homeGridviewBeans.add(homeGridviewBean);			// 设置			homeGridviewBean = new HomeGridviewBean();			homeGridviewBean			.setNormaldrawableId(R.drawable.home_setting_img);			homeGridviewBean.setDrawableName(HomeGridviewBean.NAME_SETTING);			homeGridviewBean.setBackground(R.drawable.btn_home_setting);			homeGridviewBeans.add(homeGridviewBean);			homeAdapter = new HomeAdapter(getActivity(), homeGridviewBeans,gridview);			gridview.setAdapter(homeAdapter);			gridview.setSelector(new ColorDrawable(Color.TRANSPARENT));		}		homeAdapter = new HomeAdapter(getActivity(), homeGridviewBeans,gridview);		gridview.setAdapter(homeAdapter);		gridview.setSelector(new ColorDrawable(Color.TRANSPARENT));	}	/*private void initTitle() {		((TextView) view.findViewById(R.id.title_tv)).setText("主页");		((Button) view.findViewById(R.id.back_btn)).setVisibility(View.GONE);		((TextView) view.findViewById(R.id.title_img)).setVisibility(View.VISIBLE);	}*/	private void initView() {		this.imgHeadIcon = (ImageView) view.findViewById(R.id.user_head_iv);		this.imgHeadIcon.setOnClickListener(this);		Nicktv = (TextView) view.findViewById(R.id.home_nick_tv);		Runtv = (TextView) view.findViewById(R.id.home_steps_tv);		gridview = (GridView) view.findViewById(R.id.gridView);		DeviceState = (TextView) view.findViewById(R.id.home_device_state);		Electricity = (TextView) view.findViewById(R.id.electricity);		gridview.setOnItemClickListener(onItemClickListener);		Weather_img = (ImageView) view.findViewById(R.id.home_weather_img);		Address_tv = (TextView) view.findViewById(R.id.home_address_tv);		Celsius_tv = (TextView) view.findViewById(R.id.home_celsius_tv);		tvExpireTime = (TextView) view.findViewById(R.id.expire_time_tv);		if (Constants.PAY_STATUE) {			tvExpireTime.setVisibility(View.VISIBLE);		}		popup_monitor_record = view.findViewById(R.id.popup_monitor_record);		monitor_phone_edt = (EditText) view				.findViewById(R.id.monitor_phone_edt);		affirm_btn = (Button) view.findViewById(R.id.affirm_btn);		cancel_btn = (Button) view.findViewById(R.id.cancel_btn);		popup_monitor_record.setOnClickListener(this);		affirm_btn.setOnClickListener(this);		cancel_btn.setOnClickListener(this);	}	@Override	public void onPause() {		// TODO Auto-generated method stub		super.onPause();		DevicesUtils.sendCMDToDevice(getActivity(), User.id,				babyInfoBean.getId(), "DW", "", null);	}	@Override	public void onResume() {		// TODO Auto-generated method stub		super.onResume();		String imeiTypeValue = getActivity().getIntent().getStringExtra("imeiTypeValue");		babyInfoBean = User.curBabys;		if (User.isGetBabyDdtail) {			User.isGetBabyDdtail = false;		}		getBaby();		// if(babyInfoBean!=null&&babyInfoBean.getId()!=User.curBabys.getId()){		getRunInfo();		// getLocationWeather(0, 0);		// }		DevicesUtils.sendCMDToDevice(getActivity(), User.id,				babyInfoBean.getId(), "DW", "", null);		initGeoPoint(babyInfoBean.getId());	}	Handler handler = new Handler() {		@Override		public void handleMessage(Message msg) {			// TODO Auto-generated method stub			super.handleMessage(msg);			if (msg.what == 1) {				Weather_img.setBackgroundResource(CommonUtils						.getWeatherImage(weather_tx));				Celsius_tv.setText(celsius_tx);			} else if (msg.what == 2) {				Address_tv.setText(address_tx);			}		}	};	private void initIcon() {		if (babyInfoBean == null) {			return;		}		if (!TextUtils.isEmpty(babyInfoBean.getHeadIconPath())) {			PhotoPath = imageLoader.getCacheImgFileName(babyInfoBean					.getHeadIconPath());			if (PhotoPath == null) {				Drawable cachedImage = null;				cachedImage = imageLoader.loadDrawable(						babyInfoBean.getHeadIconPath(), context, true,						new ImageCallback() {							@Override							public void imageLoaded(Drawable imageDrawable,									String imageUrl) {								if (imageDrawable != null) {									imgHeadIcon.setImageDrawable(imageDrawable);								} else {									if (babyInfoBean.getSex() == 1)										imgHeadIcon										.setImageResource(R.drawable.icon_boy);									else										imgHeadIcon										.setImageResource(R.drawable.icon_girl);								}							}						});				if (cachedImage != null) {					imgHeadIcon.setImageDrawable(cachedImage);				}			} else {				imgHeadIcon.setImageBitmap(BitmapFactory.decodeFile(PhotoPath));			}		} else {			if (babyInfoBean.getSex() == 1)				imgHeadIcon.setImageResource(R.drawable.icon_boy);			else				imgHeadIcon.setImageResource(R.drawable.icon_girl);		}	}	private void initElectricity(String value) {		if (TextUtils.isEmpty(value))			return;		/*		 * int value1 = Integer.parseInt(value); if(value1>=0 && value1<=20){		 * Electricity.setBackgroundResource(R.drawable.power10); }else		 * if(value1>20 && value1<=40){		 * Electricity.setBackgroundResource(R.drawable.power30); }else		 * if(value1>40 && value1<=50){		 * Electricity.setBackgroundResource(R.drawable.power50); }else		 * if(value1>50 && value1<=90){		 * Electricity.setBackgroundResource(R.drawable.power70); }else{		 * Electricity.setBackgroundResource(R.drawable.power100); }		 */		Electricity.setText(value + "%");	}	/**	 * gridview点击事件	 */	private final OnItemClickListener onItemClickListener = new OnItemClickListener() {		@Override		public void onItemClick(AdapterView<?> parent, View v, int position,				long id) {			String name = homeGridviewBeans.get(position).getDrawableName();			if (HomeGridviewBean.NAME_LOCATION.equals(name)) {				/**				 * 跳转到定位界面				 */				// Toast.makeText(getActivity(), "定位",				// Toast.LENGTH_SHORT).show();				Intent intent = new Intent();				intent.putExtra(MyTrace_More_Baidu.CURRENT_TAB_STR,						MyTrace_More_Baidu.LOCATION_TAB);				intent.setClass(getActivity(), MyTrace_More_Baidu.class);				context.startActivity(intent);			} else if (HomeGridviewBean.NAME_TALK_BACK.equals(name)) {				/**				 * 跳转到对讲界面				 */				context.startActivity(new Intent(context,						TalkBackActivity.class));			} else if (HomeGridviewBean.NAME_HEALTH.equals(name)) {				/**				 * 跳转到健康界面				 */				context.startActivity(new Intent(context,						PedometerActivity.class));			} else if (HomeGridviewBean.NAME_SOUND.equals(name)) {				/**				 * 跳转到录音界面				 */				// Toast.makeText(getActivity(), "录音",				// Toast.LENGTH_SHORT).show();				// sendCMDToDevice("Record", "");				context.startActivity(new Intent(context, RecordActivity.class));			} else if (HomeGridviewBean.NAME_MESSAGE.equals(name)) {				/**				 * 跳转到信息中心界面				 */				context.startActivity(new Intent(context, MsgActivity.class));			} else if (HomeGridviewBean.NAME_GUARDER.equals(name)) {				/**				 * 跳转到监护人管理界面				 */				context.startActivity(new Intent(context,						GuardianActivity.class));			} else if (HomeGridviewBean.NAME_MONITOR.equals(name)) {				/**				 * 跳转到监听界面				 */				monitor_phone_edt.setText("");				popup_monitor_record.setVisibility(View.VISIBLE);			} else if (HomeGridviewBean.NAME_SETTING.equals(name)) {				/**				 * 跳转到设置界面				 */				context.startActivity(new Intent(context,						TerminalSetActivity.class));			}			else if (HomeGridviewBean.NAME_TEACH.equals(name)) {				/**				 * 跳转到教育界面				 */				Intent education = new Intent(getActivity(), ActivityInfoCentre.class);				education.putExtra("web_url","http://info.kokobao.com/fun/andy.aspx?fid=jiaoyu");//				education.putExtra("web_title", "教育");				startActivity(education);			}		}	};	private void getBaby() {		LinkedList<WebServiceProperty> linkedlist = new LinkedList<WebServiceProperty>();		linkedlist		.add(new WebServiceProperty("DeviceID", babyInfoBean.getId()));		linkedlist.add(new WebServiceProperty("UserID", User.id));		WebServiceTask wsk = new WebServiceTask("GetDeviceDetail", linkedlist,				WebService.URL_OTHER, context, new WebServiceResult() {			@Override			public void webServiceResult(String result, String data) {				// TODO Auto-generated method stub				String msg;				if (result != null) {// 错误信息					msg = result;				} else {// 正确信息					try {						JSONObject jsonObject = new JSONObject(data);						String str = jsonObject.optString("Msg");						msg = str;						if (jsonObject.has(Constants.STATUS)								&& jsonObject.getString(										Constants.STATUS).equals("0")) {							String userInfoStr = jsonObject									.optString("info");							JSONObject beaninfo = new JSONObject(									userInfoStr);							parse(beaninfo);							initViewData();						} else {							Utils.showToast(msg);						}					} catch (JSONException e) {						// TODO Auto-generated catch block						e.printStackTrace();						msg = e.getMessage();					}				} // Toast.makeText(context, msg,				// Toast.LENGTH_LONG).show();			}		});		wsk.execute("GetDeviceDetailResult");	}	private void getRunInfo() {		LinkedList<WebServiceProperty> linkedlist = new LinkedList<WebServiceProperty>();		linkedlist		.add(new WebServiceProperty("DeviceID", babyInfoBean.getId()));		WebServiceTask wsk = new WebServiceTask("GetRunInfo", linkedlist,				WebService.URL_OTHER, context, new WebServiceResult() {			@Override			public void webServiceResult(String result, String data) {				// TODO Auto-generated method stub				String msg;				if (result != null) {// 错误信息					msg = result;				} else {// 正确信息					try {						JSONObject jsonObject = new JSONObject(data);						String str = (String) jsonObject.get("Msg");						msg = str;						if (jsonObject.has(Constants.STATUS)								&& jsonObject.getString(										Constants.STATUS).equals("0")) {							JSONArray userInfoStr = jsonObject									.getJSONArray("RunInfo");							if (userInfoStr.length() > 0) {								JSONObject member = userInfoStr										.getJSONObject(0);								if (CommonUtils.getCurrenttime()										.equals(member.optString(												"DateTime").replace(														"/", "-")))									Runtv.setText(member											.optString("Step") + "步");								else									Runtv.setText("0步");							} else {								Runtv.setText("0步");							}						}					} catch (JSONException e) {						// TODO Auto-generated catch block						e.printStackTrace();						msg = e.getMessage();					}				} // Toast.makeText(context, msg,				// Toast.LENGTH_LONG).show();			}		});		wsk.execute("GetRunInfoResult");	}	private void getlocation() {		LinkedList<WebServiceProperty> linkedlist = new LinkedList<WebServiceProperty>();		linkedlist		.add(new WebServiceProperty("DeviceID", babyInfoBean.getId()));		WebServiceTask wsk = new WebServiceTask("GetRunInfo", linkedlist,				WebService.URL_OTHER, context, new WebServiceResult() {			@Override			public void webServiceResult(String result, String data) {				// TODO Auto-generated method stub				String msg;				if (result != null) {// 错误信息					msg = result;				} else {// 正确信息					try {						JSONObject jsonObject = new JSONObject(data);						String str = (String) jsonObject.get("Msg");						msg = str;						String userInfoStr = jsonObject								.optString("RunInfo");						JSONObject beaninfo = new JSONObject(								userInfoStr);					} catch (JSONException e) {						// TODO Auto-generated catch block						e.printStackTrace();						msg = e.getMessage();					}				}				// Toast.makeText(context, msg,				// Toast.LENGTH_LONG).show();			}		});		wsk.execute("GetRunInfoResult");	}	private void getLocationWeather(String lat, String lng) {		DevicesUtils.getAddrByLatLng(getActivity(), lat, lng,				new WebServiceResult() {			@Override			public void webServiceResult(String result,					final String data) {				// TODO Auto-generated method stub				String msg;				if (result != null) {// 错误信息					msg = result;					Utils.showToast(msg);				} else {// 正确信息					if (TextUtils.isEmpty(data))						return;					new Thread(new Runnable() {						@Override						public void run() {							// TODO Auto-generated method stub							try {								String address = data;								address = address.substring(										address.indexOf("省") + 1,										address.indexOf("市"));								address_tx = address;								handler.sendEmptyMessage(2);								getWeather(new Configration()								.EcodingGB2312(address));							} catch (Exception e) {								// TODO Auto-generated catch block								e.printStackTrace();							}						}					}).start();				}			}		});	}	private void parse(JSONObject jsonobject) {		// babyInfoBean = new BabyInfoBean();		babyInfoBean.setPhoneNum(jsonobject.optString("Mob"));		babyInfoBean.setNickName(jsonobject.optString("DeviceNick"));		babyInfoBean.setBirthday(jsonobject.optString("Birthday"));		babyInfoBean.setHeadIconPath(jsonobject.optString("HeaderPicUrl"));		if (TextUtils.isEmpty(jsonobject.optString("Sex"))) {			babyInfoBean.setSex(0);		} else			babyInfoBean.setSex(Integer.parseInt(jsonobject.optString("Sex")));		babyInfoBean.setHeight(jsonobject.optString("Height"));		babyInfoBean.setWeight(jsonobject.optString("Weight"));		babyInfoBean.setRelation(jsonobject.optString("RelashionNick"));		babyInfoBean.setSn(jsonobject.optString("SN"));		babyInfoBean.setId(babyInfoBean.getId());		babyInfoBean.setIsAdmin(jsonobject.optInt("IsAdmin") == 1 ? true				: false);		babyInfoBean.setstatusmosq(jsonobject.optString("QuWen"));		babyInfoBean.setdeviceVersion(jsonobject.optString("Version"));		babyInfoBean.setdeviceTime(jsonobject.optString("hireExpireTime"));		Nicktv.setText(babyInfoBean.getNickName());		tvExpireTime.setText("到期时间："				+ jsonobject.optString("HireExpireDate").replace("/", "-"));		initIcon();		initElectricity(jsonobject.optString("Electricity"));	}	private void sendCMDToDevice(String action, String phone) {		LinkedList<WebServiceProperty> linkedlist = new LinkedList<WebServiceProperty>();		linkedlist		.add(new WebServiceProperty("DeviceID", babyInfoBean.getId()));		linkedlist.add(new WebServiceProperty("UserId", User.id));		linkedlist.add(new WebServiceProperty("Action", action));		linkedlist.add(new WebServiceProperty("Content", phone));		WebServiceTask wsk = new WebServiceTask("SendToDevice", linkedlist,				WebService.URL_OPEN, context, new WebServiceResult() {			@Override			public void webServiceResult(String result, String data) {				// TODO Auto-generated method stub				String msg;				if (result != null) {// 错误信息					msg = result;				} else {// 正确信息					try {						JSONObject jsonObject = new JSONObject(data);						String str = (String) jsonObject.get("Msg");						msg = str;					} catch (JSONException e) {						// TODO Auto-generated catch block						e.printStackTrace();						msg = e.getMessage();					}				}				// Toast.makeText(context, msg,				// Toast.LENGTH_LONG).show();			}		});		wsk.execute("SendToDeviceResult");	}	@Override	public void onClick(View v) {		// TODO Auto-generated method stub		switch (v.getId()) {		case R.id.user_head_iv:			Intent intent = new Intent();			// intent.putExtra("data", babyInfoBean);			intent.setClass(context, BabyDetailActivity.class);			startActivityForResult(intent, 3);			break;		case R.id.affirm_btn:			if (TextUtils.isEmpty(monitor_phone_edt.getText().toString())) {				Utils.showToast("请输入聆听号码");				return;			}			sendCMDToDevice("JT", monitor_phone_edt.getText().toString());			popup_monitor_record.setVisibility(View.GONE);			break;		case R.id.cancel_btn:			popup_monitor_record.setVisibility(View.GONE);			break;		case R.id.popup_monitor_record:			popup_monitor_record.setVisibility(View.GONE);			break;		default:			break;		}	}	@Override	public void onActivityResult(int requestCode, int resultCode, Intent data) {		// TODO Auto-generated method stub		super.onActivityResult(requestCode, resultCode, data);		if (resultCode == 6666) {			if (User.babyslist.size() == 0) {				Utils.showToast("设备列表为空，请重新登录绑定设备");				getActivity().finish();				return;			}			User.curBabys = User.babyslist.get(0);			babyInfoBean = User.curBabys;			getBaby();		} else if (resultCode == 7777) {			getBaby();		}	}	boolean initGeoPoint(String deviceID) {		// myTraces.clear();		babyInfoBean.traces = null;		LinkedList<WebServiceProperty> linkedlist = new LinkedList<WebServiceProperty>();		linkedlist.add(new WebServiceProperty("UserID", User.id));		linkedlist		.add(new WebServiceProperty("DeviceID", babyInfoBean.getId()));		linkedlist.add(new WebServiceProperty("MapType",				(curMapType == 1) ? "Google" : "Baidu"));		WebServiceTask wsk = new WebServiceTask("GetTrackingByUserID",				linkedlist, WebService.URL_OPEN, this.getActivity(),				new WebServiceResult() {			@Override			public void webServiceResult(String result, String data) {				// TODO Auto-generated method stub				String msg;				if (result != null) {// 错误信息					msg = result;					Utils.showToast(msg);				} else {// 正确信息					JSONObject jsonObj;					try {						jsonObj = new JSONObject(data);						if (jsonObj.has("Status")								&& (jsonObj.getInt("Status") == 0)) {							JSONArray deviceArr = jsonObj									.getJSONArray("devices");							String[] strs = deviceArr.toString()									.replace("[", "").replace("]", "")									.replace("\"", "").split(",");							int count = strs.length;							for (int i = 0; i < count; i++) {								if (strs[i] == null										|| strs[i].equals("")) {									continue;								}								Trace t = new Trace();								String[] info = strs[i].split(";");								t.initTrace(info);								babyInfoBean.traces = t;								// memberTraces.put(t.id, t);								setDeviceState(t.car_state);								getLocationWeather(t.real_lat,										t.real_lng);							}						} else {							Utils.showToast(jsonObj									.optString(Constants.MSG));						}					} catch (JSONException e) {						// TODO Auto-generated catch block						e.printStackTrace();						//						Utils.showToast("获取设备位置失败！");					}				}			}		});		wsk.execute("GetTrackingByUserIDResult");		return false;	}	/**	 * 获取天气tips	 *	 * @return 天气和tips字符串	 */	public String getWeather(String city) {		String url = "http://php.weather.sina.com.cn/xml.php?city=" + city				+ "&password=DJOYnieT8234jlsK&day=0";		HttpResponse httpResponse = null;		StringBuffer result = null;		DefaultHttpClient client = null;		try {			client = new DefaultHttpClient();			client.getParams().setParameter(					CoreConnectionPNames.CONNECTION_TIMEOUT, 15000);			client.getParams().setParameter(CoreConnectionPNames.SO_TIMEOUT,					15000);			HttpGet httpGet = new HttpGet(url);			httpResponse = client.execute(httpGet);			if (httpResponse.getStatusLine().getStatusCode() == 200) {				result = new StringBuffer("");				String s = EntityUtils.toString(httpResponse.getEntity(),						"UTF-8");				InputStream in_withcode = new ByteArrayInputStream(						s.getBytes("UTF-8"));				Weather w = new Configration().readInfo(in_withcode);				if (w != null) {					weather_tx = w.getStatus1();					celsius_tx = w.getTemperature2() + "~"							+ w.getTemperature1() + "℃";					handler.sendEmptyMessage(1);				}			} else {				Log.i("note", "天气请求异常！");				result = null;			}		} catch (Exception e) {			// TODO Auto-generated catch block			e.printStackTrace();		}		if (result != null)			return result.toString();		else			return null;	}	private void setDeviceState(String state) {		if (TextUtils.isEmpty(state))			return;		if (state.equals("0")) {			DeviceState.setText("(离线)");		} else {			DeviceState.setText("(在线)");		}	}}